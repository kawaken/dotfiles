#!/usr/bin/env zsh
# Claude Code Usage Plugin
# claudeコマンド実行後にccusageで使用状況を表示する

# ccusageコマンドが存在するかチェック
if ! command -v ccusage &> /dev/null; then
    return 0
fi

# 使用状況を表示する関数
_claude_show_usage() {
    # 今日の日付を取得（YYYYMMDD形式）
    local today=$(date +%Y%m%d)
    
    # 今日のデータを取得
    local today_json=$(ccusage daily --json --since $today --until $today 2>/dev/null)
    if [[ -z "$today_json" ]]; then
        return 0
    fi
    
    # 今月のデータを取得
    local month_json=$(ccusage monthly --json 2>/dev/null)
    if [[ -z "$month_json" ]]; then
        return 0
    fi
    
    # 今日のコストを取得
    local today_cost=$(echo "$today_json" | jq -r '.totals.totalCost // 0' 2>/dev/null)
    
    # 今月のコストを取得（現在の月のデータ）
    local current_month=$(date +%Y-%m)
    local month_cost=$(echo "$month_json" | jq -r --arg month "$current_month" '
        .monthly[] 
        | select(.month == $month) 
        | .totalCost // 0
    ' 2>/dev/null)
    
    # 結果を表示
    if [[ -n "$today_cost" && -n "$month_cost" ]]; then
        echo ""
        echo "📊 Claude Code Usage:"
        printf "  Today:       $%.2f USD\n" "$today_cost"
        printf "  This month:  $%.2f USD\n" "$month_cost"
    fi
}

# precmdフックで前のコマンドがclaudeだったかチェック
_claude_precmd_hook() {
    if [[ "$_claude_last_cmd" == "claude"* ]] || [[ "$_claude_last_cmd" == "cl"* ]]; then
        _claude_show_usage
    fi
    _claude_last_cmd=""
}

# preexecフックでコマンドを記録
_claude_preexec_hook() {
    local cmd="${1:-$2}"
    _claude_last_cmd="$cmd"
}

# フック関数を登録
autoload -Uz add-zsh-hook
add-zsh-hook precmd _claude_precmd_hook
add-zsh-hook preexec _claude_preexec_hook
