# vcs_infoを有効
autoload -Uz vcs_info

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git:*' get-revision true
zstyle ':vcs_info:git:*' check-for-changes true

zstyle ':vcs_info:git:*' stagedstr "%F{green}*"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}*"
zstyle ':vcs_info:git:*' formats '%F{white}[%F{cyan}%b%f]' '%c%u%f %m%f'
zstyle ':vcs_info:git:*' actionformats '%F{white}(%s) [%F{cyan}%b|%a%f]' '%c%u%f %m%f'

# set-messageのhook
zstyle ':vcs_info:git+set-message:*' hooks git-extra-info
function +vi-git-extra-info() {
  # work treeにいるか確認（エラー出力を抑制）
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    return 1
  fi

  case "$1" in
    0)
      # ブランチ情報にリモート情報を追加
      hook_com[branch]+=$(check_git_remote)
      ;;
    1)
      # ステージング情報に未追跡ファイル情報を追加
      hook_com[unstaged]+=$(check_git_untracked)
      hook_com[misc]+="$(count_git_st)$(check_git_user)"
      ;;
  esac
}

function check_git_remote() {
  local ahead behind remote gitstatus branch
  local -a status_parts

  # トラッキングブランチを確認
  remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
    --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

  if [[ -n ${remote} ]] ; then
    # リモートブランチ名が異なればそれを表示
    [[ ${hook_com[branch]} != ${remote#*/} ]] && branch="-%F{cyan}${remote}%f"

    # ローカルが進んでいたら 件数を追加
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
    (( $ahead )) && status_parts+=( "%F{green}+${ahead}%f" )

    # リモートが進んでいたら 件数を追加
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
    (( $behind )) && status_parts+=( "%F{red}-${behind}%f" )

    # status_parts を結合して gitstatus に格納
    gitstatus="${(j:/:)status_parts}"

    # 最終出力
    echo "%f⇡${branch}${gitstatus}"
  fi
}

function check_git_untracked() {
  # untracked のファイルがあったら 黄色* を表示
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    echo -e "%F{yellow}*"
  fi
}

function count_git_st() {
  # git status の種類別にカウントして表示
  git status -s | sort | awk '{ c[$1] += 1; } END{for (k in c) {printf "%s:%s ", k, c[k]}}'
}

function check_git_user() {
  domain=`git config user.email | cut -d'@' -f 2`
  echo "%F{magenta}${domain:0:2}%f"

}

function _update_vcs_info_msg() {
  local -a messages
  local prompt

  LANG=en_US.UTF-8 vcs_info

  if [[ -z ${vcs_info_msg_0_} ]]; then
    prompt=""
  else
    [[ -n "$vcs_info_msg_0_" ]] && messages+=( "${vcs_info_msg_0_}" )
    [[ -n "$vcs_info_msg_1_" ]] && messages+=( "${vcs_info_msg_1_}" )
    [[ -n "$vcs_info_msg_2_" ]] && messages+=( "${vcs_info_msg_2_}" )

    # 間にスペースを入れて連結する
    prompt="
${(j: :)messages}"
  fi

  echo "$prompt"
}

