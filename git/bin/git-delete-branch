#!/usr/bin/env zsh

main_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "main")

get_branches_with_status() {
    local current_branch=$(git branch --show-current)
    local worktree_branches=(${(f)"$(git worktree list --porcelain | grep '^branch ' | sed 's|^branch refs/heads/||')"})
    local main_log=$(git log "$main_branch" --oneline -100)

    local branches=(${(f)"$(git branch --format='%(refname:short)')"})

    for branch in $branches; do
        [[ "$branch" == "main" || "$branch" == "master" ]] && continue
        [[ "$branch" == "$current_branch" ]] && continue
        (( ${worktree_branches[(I)$branch]} )) && continue

        if git merge-base --is-ancestor "$branch" "$main_branch" 2>/dev/null; then
            print -P "%F{green}✓%f $branch"
        elif echo "$main_log" | grep -q "$branch"; then
            print -P "%F{green}✓%f $branch"
        else
            print -P "%F{240}?%f $branch"
        fi
    done
}

selected=$(get_branches_with_status | \
    fzf --ansi \
        --multi \
        --bind 'ctrl-a:select-all' \
        --height=50% \
        --layout=reverse \
        --header='Tab: toggle | Ctrl-A: select all | Enter: delete')

[ -z "$selected" ] && exit 0

branches=(${(f)"$(echo "$selected" | awk '{print $2}')"})
for branch in $branches; do
    git branch -D "$branch"
done
