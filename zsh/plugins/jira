# JIRA API呼び出し共通ライブラリ

# 共通のデータファイルパス
_JIRA_DATA_FILE="${XDG_DATA_HOME:-$HOME/.local/share}/jira-sync/jira_issues.json"
mkdir -p "$(dirname "$_JIRA_DATA_FILE")"

jira_setup() {
  echo -n "JIRA_URL [${JIRA_URL:-https://your-domain.atlassian.net}]: "
  read input
  export JIRA_URL="${input:-${JIRA_URL:-}}"

  echo -n "JIRA_USER [${JIRA_USER:-}]: "
  read input
  export JIRA_USER="${input:-${JIRA_USER:-}}"

  echo -n "JIRA_PROJECT [${JIRA_PROJECT:-}]: "
  read input
  export JIRA_PROJECT="${input:-${JIRA_PROJECT:-}}"

  if [[ -n "$JIRA_API_TOKEN" ]]; then
    echo -n "JIRA_API_TOKEN [現在の値を使用]: "
    read -s input
    echo
    if [[ -n "$input" ]]; then
      export JIRA_API_TOKEN="$input"
    fi
  else
    echo -n "JIRA_API_TOKEN: "
    read -s JIRA_API_TOKEN
    echo
    export JIRA_API_TOKEN
  fi

  local zshrc_local="$HOME/.zshrc_local"

  {
    echo
    echo "# JIRA Configuration"
    echo "export JIRA_URL=\"$JIRA_URL\""
    echo "export JIRA_USER=\"$JIRA_USER\""
    echo "export JIRA_PROJECT=\"$JIRA_PROJECT\""
    echo "export JIRA_API_TOKEN=\"$JIRA_API_TOKEN\""
  } >> "$zshrc_local"
}

_jira_check_env() {
  local missing=()
  
  [[ -z "$JIRA_API_TOKEN" ]] && missing+=(JIRA_API_TOKEN)
  [[ -z "$JIRA_URL" ]] && missing+=(JIRA_URL)
  [[ -z "$JIRA_USER" ]] && missing+=(JIRA_USER)
  
  if [[ ${#missing[@]} -gt 0 ]]; then
    echo "必要な環境変数が設定されていません: ${missing[*]}" >&2
    return 1
  fi
  
  if ! command -v http > /dev/null 2>&1; then
    echo "httpieがインストールされていません" >&2
    return 1
  fi
  
  return 0
}

_jira_api_call() {
  local method="$1"
  local endpoint="$2"
  shift 2
  
  if ! _jira_check_env; then
    return 1
  fi
  
  http "$method" "${JIRA_URL}${endpoint}" \
    --auth="${JIRA_USER}:${JIRA_API_TOKEN}" \
    --check-status \
    --ignore-stdin \
    --body \
    "$@"
}

# JSONファイルにデータ保存
jira_fetch() {
  local jql="Sprint in openSprints() AND status != Done AND type != エピック"
  
  local response=$(_jira_api_call GET "/rest/api/3/search" \
    "jql==$jql" \
    "fields==key,summary,status")
  
  if [[ $? -eq 0 ]]; then
    echo "$response" | jq '.issues' > "$_JIRA_DATA_FILE"
    return 0
  else
    return 1
  fi
}

_jira_is_cache_old() {
  [[ ! -f "$_JIRA_DATA_FILE" ]] && return 0
  
  local file_time=$(date -r "$_JIRA_DATA_FILE" +%s 2>/dev/null)
  [[ -z "$file_time" ]] && return 0
  
  local current_time=$(date +%s)
  local threshold=1800
  local age=$((current_time - file_time))
  
  [[ $age -gt $threshold ]]
}

# スプリント一覧表示
jira_sprint() {
  if _jira_is_cache_old; then
    if ! jira_fetch; then
      return 1
    fi
  fi
  
  if [[ "$*" == *"--raw"* ]]; then
    cat "$_JIRA_DATA_FILE"
  else
    jq -r '.[] | "\(.key)\t\(.fields.summary)"' "$_JIRA_DATA_FILE" 2>/dev/null
  fi
}

# イシュー詳細表示
jira_view() {
  local key="${1:-}"
  
  if [[ -z "$key" ]]; then
    key=$(git branch --show-current 2>/dev/null)
  fi
  
  if [[ ! "$key" =~ ^[A-Z]+-[0-9]+$ ]]; then
    echo "無効なJIRAキー: $key" >&2
    return 1
  fi
  
  local response=$(_jira_api_call GET "/rest/api/3/issue/$key" "expand==comments")
  
  if [[ $? -eq 0 ]]; then
    echo "=== $(echo "$response" | jq -r '.key'): $(echo "$response" | jq -r '.fields.summary') ==="
    echo "Status: $(echo "$response" | jq -r '.fields.status.name')"
    echo "Assignee: $(echo "$response" | jq -r '.fields.assignee.displayName // "未割り当て"')"
    echo
    echo "Description:"
    echo "$response" | jq -r '.fields.description // "説明なし"'
    echo
    
    local comments=$(echo "$response" | jq -r '.fields.comment.comments[]? | "[\(.author.displayName)] \(.body)"')
    if [[ -n "$comments" ]]; then
      echo "Comments:"
      echo "$comments"
    fi
  else
    return 1
  fi
}