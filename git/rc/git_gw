#!/bin/zsh

# Git worktree management function
# gw - Git Worktree helper for efficient branch-based development

# Helper function to shorten branch name for worktree path
function _gw_shorten_branch_name() {
    local branch_name="$1"
    local shortened_branch_name="${branch_name//\//-}"  # Replace / with -
    
    # If branch name is too long, shorten it to 20 chars
    if [ ${#shortened_branch_name} -gt 20 ]; then
        shortened_branch_name="${shortened_branch_name:0:18}__"
    fi
    
    echo "$shortened_branch_name"
}

# Helper function to get worktree path for a branch
function _gw_get_worktree_path() {
    local branch_name="$1"
    
    # Get main repository path
    local main_repo_path=$(git worktree list | head -n 1 | awk '{print $1}')
    local repo_name=$(basename "$main_repo_path")
    local parent_dir=$(dirname "$main_repo_path")
    
    # Handle special cases
    if [ -z "$branch_name" ] || [ "$branch_name" = "main" ]; then
        echo "$main_repo_path"
    else
        local shortened_branch_name=$(_gw_shorten_branch_name "$branch_name")
        echo "${parent_dir}/${repo_name}-${shortened_branch_name}"
    fi
}

function gw() {
    case "$1" in
        create|c)
            shift
            _gw_create "$@"
            ;;
        list|l)
            shift
            _gw_list "$@"
            ;;
        remove|rm)
            shift
            _gw_remove "$@"
            ;;
        cd|switch|sw)
            shift
            _gw_cd "$@"
            ;;
        claude-sync|cs)
            shift
            _gw_claude_sync "$@"
            ;;
        workon)
            shift
            _gw_workon "$@"
            ;;
        compact)
            shift
            _gw_compact "$@"
            ;;
        done)
            shift
            _gw_done "$@"
            ;;
        *)
            echo "Usage: gw <command> [options]"
            echo ""
            echo "Commands:"
            echo "  create, c <branch>     Create worktree and switch to it"
            echo "  list, l                List all worktrees"
            echo "  remove, rm <branch>    Remove worktree"
            echo "  cd [branch|-]          Switch to worktree (no args = main, - = previous)"
            echo "  switch, sw <branch>    Switch to worktree (alias for cd)"
            echo "  claude-sync, cs        Sync .claude directory from main"
            echo "  workon                 Start work with wip commit on wo/ branch"
            echo "  compact [message]      Compact fixup commits and start new wip"
            echo "  done                   Complete work and merge back"
            ;;
    esac
}

# Create new worktree
function _gw_create() {
    local branch_name="$1"
    if [ -z "$branch_name" ]; then
        echo "エラー: ブランチ名を指定してください"
        return 1
    fi

    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "エラー: gitリポジトリではありません"
        return 1
    fi

    # Get worktree path
    local worktree_path=$(_gw_get_worktree_path "$branch_name")
    local main_repo_path=$(git worktree list | head -n 1 | awk '{print $1}')

    # Check if worktree already exists
    if [ -d "$worktree_path" ]; then
        echo "Worktree already exists. Moving to: $worktree_path"
        cd "$worktree_path"
        return 0
    fi

    # Check if remote branch exists
    local remote_exists=false
    if git ls-remote --heads origin "$branch_name" | grep -q "$branch_name"; then
        remote_exists=true
        echo "リモートブランチ '$branch_name' が見つかりました。リモートブランチからworktreeを作成します。"
    else
        echo "新しいブランチ '$branch_name' としてworktreeを作成します。"
    fi

    # Update main branch
    echo "Updating main branch..."
    (cd "$main_repo_path" && git checkout main && git pull)

    # Create worktree - use different command based on remote branch existence
    echo "Creating worktree: $worktree_path"
    if [ "$remote_exists" = true ]; then
        # Remote branch exists, track it without -b
        git worktree add "$worktree_path" "$branch_name"
    else
        # Create new branch from main
        git worktree add -b "$branch_name" "$worktree_path" main
    fi

    # Move to new worktree
    cd "$worktree_path"

    # Sync .claude directory
    if [ -d "${main_repo_path}/.claude" ]; then
        echo "Syncing .claude directory..."
        cp -rn "${main_repo_path}/.claude" .
    fi

    echo "Worktree created and switched to: $worktree_path"
}

# List worktrees
function _gw_list() {
    local lines=("${(@f)$(git worktree list)}")
    for line in "${lines[@]}"; do
        local fields=($line)
        local worktree_path="${fields[1]}"
        local shortened_path=$(_shorten_path "$worktree_path")
        echo -n "$shortened_path"
        echo " ${fields[@]:1}"
    done
}

# Remove worktree
function _gw_remove() {
    local branch_name="$1"
    if [ -z "$branch_name" ]; then
        echo "エラー: ブランチ名を指定してください"
        return 1
    fi

    shift  # Remove branch name from arguments
    local additional_args=("$@")  # Capture additional arguments like --force

    # Get worktree path
    local worktree_path=$(_gw_get_worktree_path "$branch_name")
    local main_repo_path=$(git worktree list | head -n 1 | awk '{print $1}')

    if [ ! -d "$worktree_path" ]; then
        echo "エラー: Worktree '$worktree_path' が存在しません"
        return 1
    fi

    # Check if --force is already specified
    local has_force=false
    for arg in "${additional_args[@]}"; do
        if [[ "$arg" == "--force" || "$arg" == "-f" ]]; then
            has_force=true
            break
        fi
    done

    # If --force is not specified, check for untracked/modified files
    if [ "$has_force" = false ]; then
        local status_output
        status_output=$(git -C "$worktree_path" status -sb 2>/dev/null)
        local has_changes=false

        # Check if there are any changes (lines other than the branch line)
        if echo "$status_output" | grep -q "^[^#].*[AMD??]"; then
            has_changes=true
        fi

        if [ "$has_changes" = true ]; then
            echo "Worktree contains untracked or modified files:"
            echo "$status_output"
            echo ""
            echo -n "Delete anyway? [y/N]: "
            read -r response

            case "$response" in
                [Yy]|[Yy][Ee][Ss])
                    additional_args+=("--force")
                    ;;
                *)
                    echo "Aborted"
                    return 1
                    ;;
            esac
        fi
    fi

    # Move to main repository before removing worktree
    cd "$main_repo_path"

    # Remove worktree with arguments
    git worktree remove "${additional_args[@]}" "$worktree_path"
    echo "Worktree removed: $worktree_path"
}

# Switch to existing worktree
function _gw_cd() {
    local branch_name="$1"

    # Save current path before switching
    local current_path=$(pwd)

    # Handle different cases
    if [ "$branch_name" = "-" ]; then
        # Dash: go to previous worktree
        if [ -z "$GW_PREVIOUS_WORKTREE" ]; then
            echo "エラー: 以前のワークツリーがありません"
            return 1
        fi
        local worktree_path="$GW_PREVIOUS_WORKTREE"
    else
        # Get worktree path (handles empty, main, and branch names)
        local worktree_path=$(_gw_get_worktree_path "$branch_name")
    fi

    if [ ! -d "$worktree_path" ]; then
        echo "エラー: Worktree '$worktree_path' が存在しません"
        return 1
    fi

    # Save current path as previous before switching
    export GW_PREVIOUS_WORKTREE="$current_path"

    cd "$worktree_path"
    echo "Switched to: $worktree_path"
}

# Sync .claude directory from main
function _gw_claude_sync() {
    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "エラー: gitリポジトリではありません"
        return 1
    fi

    # Get main repository path
    local main_repo_path=$(git worktree list | head -n 1 | awk '{print $1}')
    local current_path=$(pwd)

    # Check if we're in main repository
    if [ "$current_path" = "$main_repo_path" ]; then
        echo "エラー: mainリポジトリでは同期の必要がありません"
        return 1
    fi

    # Check if .claude exists in main
    if [ ! -d "${main_repo_path}/.claude" ]; then
        echo "エラー: mainリポジトリに.claudeディレクトリが存在しません"
        return 1
    fi

    # Sync .claude directory
    echo "Syncing .claude directory from main..."
    rm -rf .claude
    cp -r "${main_repo_path}/.claude" .
    echo ".claude directory synced successfully"
}

# Helper function to create wip commit and set wip.head
function _gw_create_wip_commit() {
    # Get current branch name for commit message
    local current_branch=$(git branch --show-current)
    
    # Create empty wip commit
    echo "Creating wip commit..."
    git commit --allow-empty -m "wo: start at ${current_branch}"
    
    # Save commit hash to git config
    local commit_hash=$(git rev-parse HEAD)
    git config --local wip.head "${commit_hash}"
    
    echo "Created wip commit: ${commit_hash}"
}

# Start work with wip commit on wo/ branch
function _gw_workon() {
    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "エラー: gitリポジトリではありません"
        return 1
    fi

    # Get current branch name
    local current_branch=$(git branch --show-current)
    if [ -z "$current_branch" ]; then
        echo "エラー: 現在のブランチ名を取得できません"
        return 1
    fi

    # Create wo/ branch name
    local wo_branch="wo/${current_branch}"

    # Check if wo/ branch already exists
    if git show-ref --verify --quiet "refs/heads/${wo_branch}"; then
        echo "エラー: ブランチ '${wo_branch}' が既に存在します"
        return 1
    fi

    # Create and checkout wo/ branch
    echo "Creating and switching to branch: ${wo_branch}"
    git checkout -b "${wo_branch}"

    # Create wip commit using helper function
    _gw_create_wip_commit

    echo "Started work on ${wo_branch}"
}

# Compact fixup commits and start new wip
function _gw_compact() {
    local message="$1"

    # Message is optional - will open editor if not provided

    # Check if wip.head is set
    local wip_head=$(git config --get wip.head)
    if [ -z "$wip_head" ]; then
        echo "エラー: wip.head が設定されていません"
        echo "先に 'gw workon' を実行してください"
        return 1
    fi

    # Check if wip commit exists
    if ! git cat-file -e "${wip_head}" 2>/dev/null; then
        echo "エラー: wip.head のコミット '${wip_head}' が存在しません"
        return 1
    fi

    # Rebase with autosquash to compact fixup commits
    echo "Compacting fixup commits..."
    git rebase --autosquash "${wip_head}^"

    # Update the wip commit message
    echo "Updating commit message..."
    if [ -z "$message" ]; then
        # Open editor if no message provided
        git commit --amend
    else
        git commit --amend -m "$message"
    fi

    # Create new wip commit using helper function
    _gw_create_wip_commit

    echo "Compacted commits and created new wip"
}

# Complete work and merge back
function _gw_done() {
    # Check if wip.head is set
    local wip_head=$(git config --get wip.head)
    if [ -z "$wip_head" ]; then
        echo "エラー: wip.head が設定されていません"
        return 1
    fi

    # Get current branch name
    local current_branch=$(git branch --show-current)
    if [[ ! "$current_branch" =~ ^wo/ ]]; then
        echo "エラー: wo/ ブランチで作業していません"
        return 1
    fi

    # Extract original branch name
    local original_branch=${current_branch#wo/}

    # Check if there's only wip.head commit (empty wip)
    local commit_count=$(git rev-list "${wip_head}^..HEAD" --count 2>/dev/null || echo "0")
    if [ "$commit_count" = "1" ]; then
        # Check if the only commit is the wip.head itself
        local head_hash=$(git rev-parse HEAD)
        if [ "$head_hash" = "$wip_head" ]; then
            # Check if it's an empty commit with wo: start message
            local commit_message=$(git log -1 --pretty=%s HEAD)
            if [[ "$commit_message" =~ ^"wo: start at " ]]; then
                echo "Removing empty wip commit..."
                git reset --hard HEAD^
            fi
        fi
    else
        # Check for remaining fixup commits
        local fixup_count=$(git log --oneline "${wip_head}^..HEAD" | grep -c "^[^ ]* fixup!" || true)
        if [ "$fixup_count" -gt 0 ]; then
            echo "エラー: 未処理の fixup コミットが ${fixup_count} 件あります"
            echo "先に 'gw compact' を実行してください"
            return 1
        fi
    fi

    # Switch back to original branch
    echo "Switching back to ${original_branch}..."
    git checkout "${original_branch}"

    # Rebase wo/ branch commits onto original branch
    echo "Rebasing commits..."
    git rebase "${current_branch}"

    # Delete wo/ branch
    echo "Deleting work branch ${current_branch}..."
    git branch -D "${current_branch}"

    # Remove wip.head config
    git config --unset wip.head

    echo "Work completed and merged back to ${original_branch}"
}

# Completion function
function _gw() {
    local -a subcommands
    local state

    subcommands=(
        'create:Create new worktree and switch to it'
        'c:Create new worktree (alias)'
        'list:List all worktrees'
        'l:List worktrees (alias)'
        'remove:Remove worktree'
        'rm:Remove worktree (alias)'
        'cd:Change to worktree directory'
        'switch:Switch to worktree (alias for cd)'
        'sw:Switch to worktree (alias)'
        'claude-sync:Sync .claude directory from main'
        'cs:Sync .claude directory (alias)'
        'workon:Start work with wip commit on wo/ branch'
        'compact:Compact fixup commits and start new wip'
        'done:Complete work and merge back'
    )

    _arguments -C \
        '1: :->command' \
        '2: :->args'

    case $state in
        command)
            _describe -t commands 'gw subcommand' subcommands
            ;;
        args)
            case $words[2] in
                remove|rm|cd|switch|sw)
                    _gw_worktree_branches
                    ;;
                create|c)
                    # No completion for branch name
                    ;;
            esac
            ;;
    esac
}

# Helper function to complete worktree branches
function _gw_worktree_branches() {
    local -a branches
    local worktree_list

    # Get worktree list
    worktree_list=$(git worktree list 2>/dev/null)
    if [[ -n "$worktree_list" ]]; then
        # Always include main as an option
        branches=("main")

        # Extract branch names from worktrees (excluding main which is already added)
        local other_branches=(${(f)"$(echo "$worktree_list" | awk 'NR>1 {print $NF}' | sed 's/\[//;s/\]//')"})
        branches+=("${other_branches[@]}")

        if [[ ${#branches[@]} -gt 0 ]]; then
            _describe -t branches 'worktree branch' branches
        fi
    fi
}

# Register completion
if (( $+functions[compdef] )); then
    compdef _gw gw
    # Also register completion for gd alias
    compdef _gw gd
fi
